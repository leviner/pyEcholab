# -*- coding: utf-8 -*-
"""my_first_echogram.py

This script demonstrates using the echosounder module to reading a raw file
and plot Sv echograms.

The echosounder module provides a simplified interface for reading raw data
generated by EK60, EK80, and similar instruments. Due to the wide variety of
instruments that utilize the Simrad "raw" data format and their many configuration
options, pyEcholab's classes for working with these data are complex. The
echosounder module makes a few assumptions that are applicable to most use
cases that significantly reduces this complexity.



Until better documentation is created, here are the highlights of the
processed_data object.

Attributes

bottom - an pyEcholab.line object containing the bottom detections
channel_id - a string containing the channel name
data - the attribute that contains the sample data
data_type - a string specifying the data type: Sv, sv, Sp, sp, power, etc
depth - contains the vertical axis values when the vertical axis is specified as depth
 OR
range - contains the vertical axis when the vertical axis is specified as range
frequency - the frequency of the sample data
heading - contains the heading data by ping
heave - contains the heave data by ping
is_heave_corrected - will be True if heave correction has been applied to the data
is_log - Will be True if data are in log form
latitude - contains the latitude data by ping
longitude - contains the longitude data by ping
n_pings - contains the number of pings in the data
n_samples - contains the number of samples in the data
ping_time - contains the ping times as a numpy datetime64 object
pitch - contains the longitude data by ping
sample_interval
sample_offset - the number of samples the data have been offset vertically
sample_thickness
sound_speed
spd_over_grnd_kts
transducer_offset
trip_distance_nmi


Methods

get_v_axis - return the vertical axis and the axis type (range or depth)
heave_correct - apply heave correction
match_pings
match_samples
to_depth - convert the vertical axis to depth
to_linear - convert the dat to linear form
to_log - convert the data to log form
to_range - convert the vertical axis to range


"""

import matplotlib.pyplot as plt
from echolab2.instruments import echosounder
from echolab2.plotting.matplotlib import echogram


#  specify the raw file to read. You can provide a string specifying the
#  full path to the data file or a list of strings if you want to read
#  multiple files at the same time.
rawfile = 'C:/EK Test Data/EK60/DY1807/DY1807_EK60-D20180607-T223129.raw'

#  use the echosounder module to read the data. The Echosounder module provides
#  a simple interface for reading and extracting data from Simrad .raw files.
#  It will read the specified raw file(s) and attempt to read their associated
#  bottom detection files. echosounder.read() will return either an EK60 or EK80
#  object depending on the format of the data that was read.
print("Reading .raw data...")
ek_data = echosounder.read(rawfile)

#  print some information about the data we just read
print(ek_data)

#  get calibration objects for the data.  echosounder.get_calibration_from_raw()
#  will return a dict, keyed by channel ID, each containing a calibration object
#  populated using the data from the raw data. While we will not do it here, you
#  should modify the calibration values as needed if the values you want to use
#  were not recorded in the .raw file.
cal_objects = echosounder.get_calibration_from_raw(ek_data)

#  now get Sv data. We pass the EK data object which contains the raw sounder data,
#  our dictionary of calibration objects, and we set return_depth to True to return
#  data on a depth grid. get_Sv() will return a dictionary, keyed by channel ID,
#  containing the raw sample data converted to Sv using the parameters specified in
#  the calibration object. The data are contained in a echolab processed_data object
#  that has many useful

Sv_data = echosounder.get_Sv(ek_data, calibration=cal_objects, return_depth=True)

#  iterate thru the channels and plot
for channel_id in Sv_data:
    fig = plt.figure()

    #  create an echogram
    eg = echogram.Echogram(fig, Sv_data[channel_id], threshold=[-70,-34])

    #  add the bottom line
    eg.plot_line(Sv_data[channel_id].bottom, color=[1.0, 0.8, 0], linewidth=1.5)

    #  and a color bar
    eg.add_colorbar(fig)

    # and title
    eg.axes.set_title("Sv " + str(channel_id))


# Show our figures
plt.show()


